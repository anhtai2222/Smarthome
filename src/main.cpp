#define BLYNK_TEMPLATE_ID "TMPL6pIN-O2Db"
#define BLYNK_TEMPLATE_NAME "da"
#define BLYNK_AUTH_TOKEN "WJqkbjQbWq4b7Jbf23GPZEd5YTnqNDpr"
#include <Arduino.h>
#include<DHT20.h>
#include <Wire.h>
#include <Adafruit_NeoPixel.h>
#include <BlynkSimpleEsp32.h>
#include <ESP32Servo.h>
#include <WiFi.h>
////////////////////////////////////////////
#define FAN 2
#define TRIGGER_PIN 19  // Ch√¢n Trigger c·ªßa c·∫£m bi·∫øn ORC
#define ECHO_PIN 23    // Ch√¢n Echo c·ªßa c·∫£m bi·∫øn ORC
#define NUM_LEDS 4
#define CD_PIN 27         //chuy·ªÉn ƒë·ªông
#define Light_PIN  32       ///√°nh s√°ng
#define LED_PIN 33      //led
////////// #define Servo 13
Servo myServo;  // Khai b√°o ƒë·ªëi t∆∞·ª£ng Servo
const int servoPin = 18;  // **Ch√¢n k·∫øt n·ªëi Servo (GPIO 13)**
int button =0;
int varFan=0;
unsigned long servoStartTime = 0;
unsigned long ultrasonicStartTime = 0;
unsigned long totalServoTime = 0;
unsigned long totalUltrasonicTime = 0;

unsigned long fanStartTime = 0;
unsigned long totalFanTime = 0;

unsigned long ledStartTime = 0;
unsigned long totalLedTime = 0;

unsigned long dhtStartTime = 0;
unsigned long totalDhtTime = 0;

unsigned long camBienCDStartTime = 0;
unsigned long totalCamBienCDTime = 0;
char auth[] = BLYNK_AUTH_TOKEN;
char  ssid[] = "ACLAB";
char pass[]="ACLAB2023";
DHT20 dht20;  // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng c·∫£m bi·∫øn DHT20
Adafruit_NeoPixel strip(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);
long duration;
int distance;
//set 3 led color
// H√†m ƒë·ªÉ theo d√µi v√† c·ªông d·ªìn th·ªùi gian ho·∫°t ƒë·ªông cho t·ª´ng thi·∫øt b·ªã
void trackTime(unsigned long &startTime, unsigned long &totalTime) {
  if (startTime == 0) {
    startTime = millis();  // Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu khi thi·∫øt b·ªã ho·∫°t ƒë·ªông
  }

  totalTime += millis() - startTime;  // C·ªông d·ªìn th·ªùi gian ho·∫°t ƒë·ªông
  startTime = millis();  // C·∫≠p nh·∫≠t th·ªùi gian b·∫Øt ƒë·∫ßu khi thi·∫øt b·ªã ho·∫°t ƒë·ªông ti·∫øp
}

// H√†m m·ªü c·ª≠a ƒëi·ªÅu khi·ªÉn Servo
void openDoor() {
  myServo.write(120);  // M·ªü c·ª≠a (Servo xoay 90 ƒë·ªô)
  delay(1000); // Gi·ªØ c·ª≠a m·ªü trong 5 gi√¢y
  myServo.write(0);   // ƒê√≥ng c·ª≠a (Servo xoay v·ªÅ 0 ƒë·ªô)
}

// H√†m ki·ªÉm tra c·∫£m bi·∫øn si√™u √¢m v√† ƒëi·ªÅu khi·ªÉn Servo
void checkUltrasonic() {
  duration = pulseIn(ECHO_PIN, HIGH);
  distance = duration * 0.034 / 2;

  if (distance < 15) {
    Serial.println("üö∂ Ph√°t hi·ªán v·∫≠t th·ªÉ! M·ªü c·ª≠a.");
    digitalWrite(LED_PIN, HIGH); // B·∫≠t LED
    openDoor();  // G·ªçi h√†m m·ªü c·ª≠a
    trackTime(servoStartTime, totalServoTime);  // C·ªông d·ªìn th·ªùi gian ho·∫°t ƒë·ªông c·ªßa Servo
  }
}

// H√†m ƒëi·ªÅu khi·ªÉn qu·∫°t
void controlFan(bool isOn) {
  if (isOn) {
    digitalWrite(FAN, HIGH);  // B·∫≠t qu·∫°t
    trackTime(fanStartTime, totalFanTime);  // C·ªông d·ªìn th·ªùi gian qu·∫°t ho·∫°t ƒë·ªông
  } else {
    digitalWrite(FAN, LOW);  // T·∫Øt qu·∫°t
  }
}

// H√†m ƒëi·ªÅu khi·ªÉn LED
void controlLED(bool isOn) {
  if (isOn) {
    digitalWrite(LED_PIN, HIGH);  // B·∫≠t LED
    trackTime(ledStartTime, totalLedTime);  // C·ªông d·ªìn th·ªùi gian LED ho·∫°t ƒë·ªông
  } else {
    digitalWrite(LED_PIN, LOW);  // T·∫Øt LED
  }
}

// H√†m ƒëi·ªÅu khi·ªÉn c·∫£m bi·∫øn DHT20 (Gi·∫£ s·ª≠ DHT20 ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi ch√¢n DHT_PIN)
void controlDHT20() {
 
  trackTime(dhtStartTime, totalDhtTime);  // C·ªông d·ªìn th·ªùi gian ho·∫°t ƒë·ªông c·ªßa DHT20
}

// H√†m ƒëi·ªÅu khi·ªÉn c·∫£m bi·∫øn c·ª≠a
void controlCamBienCD() {
  // Gi·∫£ s·ª≠ c·∫£m bi·∫øn c·ª≠a ƒë∆∞·ª£c b·∫≠t khi c√≥ t√≠n hi·ªáu m·ªü c·ª≠a
  trackTime(camBienCDStartTime, totalCamBienCDTime);  // C·ªông d·ªìn th·ªùi gian c·∫£m bi·∫øn c·ª≠a ho·∫°t ƒë·ªông
}

void setColor(uint32_t color) {   
  for (int i = 0; i < NUM_LEDS-1; i++) {
    strip.setPixelColor(i, color);
  }
  strip.show();
}
void setup() {  
  //set up blynk
 
  // put your setup code here, to run once:
  Serial.begin(115200);  // Kh·ªüi ƒë·ªông Serial Monitor
  Wire.begin();          // Kh·ªüi ƒë·ªông giao ti·∫øp I2C
  Blynk.begin(auth, ssid, pass);
  if (dht20.begin()) {
    Serial.println("DHT20 ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!");
  } else {
    Serial.println("Kh√¥ng t√¨m th·∫•y DHT20, ki·ªÉm tra k·∫øt n·ªëi!");
  }
  pinMode(CD_PIN, INPUT);
  pinMode(TRIGGER_PIN, OUTPUT);  // Ch√¢n Trigger l√† Output
  pinMode(ECHO_PIN, INPUT);     // Ch√¢n Echo l√† Input
  pinMode(LED_PIN, OUTPUT);
  pinMode(FAN, OUTPUT);
  myServo.attach(servoPin, 500, 2400);
  strip.begin();
  strip.show(); // T·∫Øt t·∫•t c·∫£ LED ban ƒë·∫ßu
}
void http_send(){

}
void loop() {

  // put your main code here, to run repeatedly:
  Blynk.run();
  int light_value = analogRead(Light_PIN);
  float light_percent = (light_value / 4095.0) * 100.0;  // ESP32 c√≥ ƒë·ªô ph√¢n gi·∫£i ADC 12-bit (0-4095)
  int motion = digitalRead(CD_PIN);

  if (motion == HIGH) { // N·∫øu ph√°t hi·ªán chuy·ªÉn ƒë·ªông
    Serial.println("üö∂ Ph√°t hi·ªán chuy·ªÉn ƒë·ªông! B·∫≠t LED // mo cua.");
    setColor(strip.Color(0, 255, 0));//xanh
   // myServo.write(120);  // M·ªü c·ª≠a (Servo xoay 90 ƒë·ªô)
     // Gi·ªØ LED s√°ng 5 gi√¢y
    //myServo.write(0);   // ƒê√≥ng c·ª≠a (Servo xoay v·ªÅ 0 ƒë·ªô)
    openDoor();
  } else {
    setColor(strip.Color(0, 0, 0)); // T·∫Øt LED
  }
  // ƒê·ªçc nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m t·ª´ DHT20
  if (dht20.read()) {
    Serial.println("‚ùå L·ªói khi ƒë·ªçc c·∫£m bi·∫øn DHT20!");
  } else {
    Serial.print("üå° Nhi·ªát ƒë·ªô: ");
    Serial.print(dht20.getTemperature());
    Serial.println("¬∞C");
    Serial.print("üí° √Ånh s√°ng : ");
    Serial.print(light_percent);
    Serial.println("%");

    Serial.print("üíß ƒê·ªô ·∫©m: ");
    Serial.print(dht20.getHumidity());
    Serial.println("%");
    Serial.println("--------------------------------------------------");
  }
  Blynk.virtualWrite(V0, dht20.getTemperature());
  Blynk.virtualWrite(V4, dht20.getHumidity());
  Blynk.virtualWrite(V1, light_percent);
   // G·ª≠i t√≠n hi·ªáu Trigger ƒë·ªÉ ƒëo kho·∫£ng c√°ch
   digitalWrite(TRIGGER_PIN, LOW);  
   delayMicroseconds(2);
   digitalWrite(TRIGGER_PIN, HIGH);
   delayMicroseconds(10);
   digitalWrite(TRIGGER_PIN, LOW);
 
   // ƒêo th·ªùi gian ph·∫£n h·ªìi t·ª´ Echo
   duration = pulseIn(ECHO_PIN, HIGH);
   
   // T√≠nh kho·∫£ng c√°ch (cm) d·ª±a tr√™n th·ªùi gian ph·∫£n h·ªìi
   distance = duration * 0.034 / 2;
   if (distance < 20) {
    Serial.println("üö∂ Ph√°t hi·ªán v·∫≠t th·ªÉ! M·ªü c·ª≠a.");    
    myServo.write(120);  // M·ªü c·ª≠a (Servo xoay 90 ƒë·ªô)
    delay(1000); // Gi·ªØ c·ª≠a m·ªü trong 5 gi√¢y
    myServo.write(0);   // ƒê√≥ng c·ª≠a (Servo xoay v·ªÅ 0 ƒë·ªô)
  }
  delay(1000); // ƒê·ª£i 1 gi√¢y
}
 


// put function definitions here:
BLYNK_WRITE(V5) {
  int varFan = param.asInt();  // ƒê·ªçc gi√° tr·ªã t·ª´ Blynk (Slider)
  int fanSpeed = map(varFan, 0, 100, 0, 255); // Chuy·ªÉn ƒë·ªïi gi√° tr·ªã t·ª´ 0-100% sang PWM (0-255)

  if (varFan == 0) {
    analogWrite(FAN, 0);  // T·∫Øt qu·∫°t ho√†n to√†n
  } else {
    analogWrite(FAN, fanSpeed);  // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô qu·∫°t theo PWM
  }
}
BLYNK_WRITE(V3)
{
  button = param.asInt();
  if (button == 1)
  {
    strip.setPixelColor(3, strip.Color(255, 0, 0)); // C≈©ng l√† ƒë·ªè, n·∫øu LED d√πng GRB

  }
  else
  {
    strip.setPixelColor(3, strip.Color(0, 0, 0)); // C≈©ng l√† ƒë·ªè, n·∫øu LED d√πng GRB

  }
}
